// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed.sql

package sqlc

import (
	"context"
	"time"
)

const deleteFeed = `-- name: DeleteFeed :exec
delete
from feeds
where feed_id = $1
`

func (q *Queries) DeleteFeed(ctx context.Context, feedID string) error {
	_, err := q.db.Exec(ctx, deleteFeed, feedID)
	return err
}

const insertFeed = `-- name: InsertFeed :exec
insert into feeds (feed_id, url, title, description, registered_at)
values ($1, $2, $3, $4, $5)
`

type InsertFeedParams struct {
	FeedID       string
	Url          string
	Title        string
	Description  *string
	RegisteredAt time.Time
}

func (q *Queries) InsertFeed(ctx context.Context, arg InsertFeedParams) error {
	_, err := q.db.Exec(ctx, insertFeed,
		arg.FeedID,
		arg.Url,
		arg.Title,
		arg.Description,
		arg.RegisteredAt,
	)
	return err
}

const insertFeedFetch = `-- name: InsertFeedFetch :exec
insert into feed_fetches (feed_fetch_id, feed_id, status, message, fetched_at)
values ($1, $2, $3, $4, $5)
`

type InsertFeedFetchParams struct {
	FeedFetchID string
	FeedID      string
	Status      FeedFetchStatus
	Message     *string
	FetchedAt   time.Time
}

func (q *Queries) InsertFeedFetch(ctx context.Context, arg InsertFeedFetchParams) error {
	_, err := q.db.Exec(ctx, insertFeedFetch,
		arg.FeedFetchID,
		arg.FeedID,
		arg.Status,
		arg.Message,
		arg.FetchedAt,
	)
	return err
}

const selectFeed = `-- name: SelectFeed :one
select feed_id, url, title, description, registered_at, last_fetched_at, created_at, updated_at
from feeds
where feed_id = $1
`

func (q *Queries) SelectFeed(ctx context.Context, feedID string) (Feed, error) {
	row := q.db.QueryRow(ctx, selectFeed, feedID)
	var i Feed
	err := row.Scan(
		&i.FeedID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.RegisteredAt,
		&i.LastFetchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectFeedsOrderByRegisteredAtAsc = `-- name: SelectFeedsOrderByRegisteredAtAsc :many
select feed_id, url, title, description, registered_at, last_fetched_at, created_at, updated_at
from feeds
order by registered_at asc
`

func (q *Queries) SelectFeedsOrderByRegisteredAtAsc(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.Query(ctx, selectFeedsOrderByRegisteredAtAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.FeedID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.RegisteredAt,
			&i.LastFetchedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeedLastFetchedAt = `-- name: UpsertFeedLastFetchedAt :exec
update feeds
set last_fetched_at = $1,
    updated_at      = now()
`

func (q *Queries) UpsertFeedLastFetchedAt(ctx context.Context, lastFetchedAt *time.Time) error {
	_, err := q.db.Exec(ctx, upsertFeedLastFetchedAt, lastFetchedAt)
	return err
}
