// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type FeedFetchStatus string

const (
	FeedFetchStatusSuccess FeedFetchStatus = "Success"
	FeedFetchStatusFailure FeedFetchStatus = "Failure"
)

func (e *FeedFetchStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FeedFetchStatus(s)
	case string:
		*e = FeedFetchStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FeedFetchStatus: %T", src)
	}
	return nil
}

type NullFeedFetchStatus struct {
	FeedFetchStatus FeedFetchStatus
	Valid           bool // Valid is true if FeedFetchStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFeedFetchStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FeedFetchStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FeedFetchStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFeedFetchStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FeedFetchStatus), nil
}

type PostFetchStatus string

const (
	PostFetchStatusSuccess PostFetchStatus = "Success"
	PostFetchStatusFailure PostFetchStatus = "Failure"
)

func (e *PostFetchStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostFetchStatus(s)
	case string:
		*e = PostFetchStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostFetchStatus: %T", src)
	}
	return nil
}

type NullPostFetchStatus struct {
	PostFetchStatus PostFetchStatus
	Valid           bool // Valid is true if PostFetchStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostFetchStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostFetchStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostFetchStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostFetchStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostFetchStatus), nil
}

type PostStatus string

const (
	PostStatusRegistered PostStatus = "Registered"
	PostStatusFetched    PostStatus = "Fetched"
	PostStatusSummarized PostStatus = "Summarized"
)

func (e *PostStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostStatus(s)
	case string:
		*e = PostStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostStatus: %T", src)
	}
	return nil
}

type NullPostStatus struct {
	PostStatus PostStatus
	Valid      bool // Valid is true if PostStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostStatus), nil
}

type Feed struct {
	FeedID        string
	Url           string
	TitleOriginal string
	Description   *string
	RegisteredAt  time.Time
	LastFetchedAt *time.Time
	CreatedAt     time.Time
	UpdatedAt     time.Time
	TitleEditted  *string
	Idx           int32
	Tags          []string
}

type FeedFetch struct {
	FeedFetchID string
	FeedID      string
	Status      FeedFetchStatus
	Message     *string
	FetchedAt   time.Time
	CreatedAt   time.Time
}

type Post struct {
	PostID        string
	FeedID        string
	Url           string
	Title         string
	Description   *string
	Author        *string
	Status        PostStatus
	PostedAt      *time.Time
	LastFetchedAt *time.Time
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type PostFavorite struct {
	PostFavoriteID string
	PostID         string
	AddedAt        time.Time
	CreatedAt      time.Time
}

type PostFetch struct {
	PostFetchID string
	PostID      string
	Status      PostFetchStatus
	Message     *string
	FetchedAt   time.Time
	CreatedAt   time.Time
}

type PostSummary struct {
	PostSummaryID   string
	PostID          string
	SummarizeMethod string
	Summary         string
	SummarizedAt    time.Time
	CreatedAt       time.Time
}
