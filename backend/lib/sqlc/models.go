// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type CrawlStatus string

const (
	CrawlStatusSuccess CrawlStatus = "Success"
	CrawlStatusFailure CrawlStatus = "Failure"
)

func (e *CrawlStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrawlStatus(s)
	case string:
		*e = CrawlStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CrawlStatus: %T", src)
	}
	return nil
}

type NullCrawlStatus struct {
	CrawlStatus CrawlStatus
	Valid       bool // Valid is true if CrawlStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrawlStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CrawlStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrawlStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrawlStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrawlStatus), nil
}

type Crawl struct {
	CrawlID   string
	FeedID    string
	Status    CrawlStatus
	Meessage  *string
	CrawledAt time.Time
	CreatedAt time.Time
}

type Feed struct {
	FeedID       string
	Url          string
	Title        string
	Description  *string
	RegisteredAt time.Time
	CreatedAt    time.Time
}

type Post struct {
	PostID          string
	FeedID          string
	CrawlID         string
	Title           string
	Author          *string
	Url             string
	SummaryOriginal *string
	PostedAt        time.Time
	CreatedAt       time.Time
}
