// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package sqlc

import (
	"context"
	"time"
)

const insertPost = `-- name: InsertPost :exec
insert into posts (post_id, feed_id, title, description, author, url, posted_at, status)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertPostParams struct {
	PostID      string
	FeedID      string
	Title       string
	Description *string
	Author      *string
	Url         string
	PostedAt    *time.Time
	Status      PostStatus
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.Exec(ctx, insertPost,
		arg.PostID,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.Url,
		arg.PostedAt,
		arg.Status,
	)
	return err
}

const insertPostFetch = `-- name: InsertPostFetch :exec
insert into post_fetches (post_fetch_id, post_id, status, message, fetched_at)
values ($1, $2, $3, $4, $5)
`

type InsertPostFetchParams struct {
	PostFetchID string
	PostID      string
	Status      PostFetchStatus
	Message     *string
	FetchedAt   time.Time
}

func (q *Queries) InsertPostFetch(ctx context.Context, arg InsertPostFetchParams) error {
	_, err := q.db.Exec(ctx, insertPostFetch,
		arg.PostFetchID,
		arg.PostID,
		arg.Status,
		arg.Message,
		arg.FetchedAt,
	)
	return err
}

const selectPost = `-- name: SelectPost :one
select post_id, feed_id, url, title, description, author, status, posted_at, last_fetched_at, created_at, updated_at
from posts
where post_id = $1
`

func (q *Queries) SelectPost(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRow(ctx, selectPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.FeedID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.Status,
		&i.PostedAt,
		&i.LastFetchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectPostsOrderByPostedAtAsc = `-- name: SelectPostsOrderByPostedAtAsc :many
select post_id, feed_id, url, title, description, author, status, posted_at, last_fetched_at, created_at, updated_at
from posts
order by posted_at asc
`

func (q *Queries) SelectPostsOrderByPostedAtAsc(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, selectPostsOrderByPostedAtAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.FeedID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.Status,
			&i.PostedAt,
			&i.LastFetchedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
update posts
set title           = $1,
    description     = $2,
    author          = $3,
    url             = $4,
    posted_at       = $5,
    last_fetched_at = $6,
    updated_at      = now()
where post_id = $7
`

type UpdatePostParams struct {
	Title         string
	Description   *string
	Author        *string
	Url           string
	PostedAt      *time.Time
	LastFetchedAt *time.Time
	PostID        string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.Url,
		arg.PostedAt,
		arg.LastFetchedAt,
		arg.PostID,
	)
	return err
}
