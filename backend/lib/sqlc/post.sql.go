// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package sqlc

import (
	"context"
	"time"
)

const deletePostFavorite = `-- name: DeletePostFavorite :exec
delete from post_favorites where post_favorite_id = $1
`

func (q *Queries) DeletePostFavorite(ctx context.Context, postFavoriteID string) error {
	_, err := q.db.Exec(ctx, deletePostFavorite, postFavoriteID)
	return err
}

const insertPost = `-- name: InsertPost :exec
insert into posts (post_id, feed_id, title, description, author, url, posted_at, status)
values ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertPostParams struct {
	PostID      string
	FeedID      string
	Title       string
	Description *string
	Author      *string
	Url         string
	PostedAt    *time.Time
	Status      PostStatus
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.Exec(ctx, insertPost,
		arg.PostID,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.Url,
		arg.PostedAt,
		arg.Status,
	)
	return err
}

const insertPostFavorite = `-- name: InsertPostFavorite :exec
insert into post_favorites (post_favorite_id, post_id, added_at)
values ($1, $2, $3)
`

type InsertPostFavoriteParams struct {
	PostFavoriteID string
	PostID         string
	AddedAt        time.Time
}

func (q *Queries) InsertPostFavorite(ctx context.Context, arg InsertPostFavoriteParams) error {
	_, err := q.db.Exec(ctx, insertPostFavorite, arg.PostFavoriteID, arg.PostID, arg.AddedAt)
	return err
}

const insertPostFetch = `-- name: InsertPostFetch :exec
insert into post_fetches (post_fetch_id, post_id, status, message, fetched_at)
values ($1, $2, $3, $4, $5)
`

type InsertPostFetchParams struct {
	PostFetchID string
	PostID      string
	Status      PostFetchStatus
	Message     *string
	FetchedAt   time.Time
}

func (q *Queries) InsertPostFetch(ctx context.Context, arg InsertPostFetchParams) error {
	_, err := q.db.Exec(ctx, insertPostFetch,
		arg.PostFetchID,
		arg.PostID,
		arg.Status,
		arg.Message,
		arg.FetchedAt,
	)
	return err
}

const insertPostSummary = `-- name: InsertPostSummary :exec
insert into post_summaries (post_summary_id, post_id, summarize_method, summary, summarized_at)
values ($1, $2, $3, $4, $5)
`

type InsertPostSummaryParams struct {
	PostSummaryID   string
	PostID          string
	SummarizeMethod string
	Summary         string
	SummarizedAt    time.Time
}

func (q *Queries) InsertPostSummary(ctx context.Context, arg InsertPostSummaryParams) error {
	_, err := q.db.Exec(ctx, insertPostSummary,
		arg.PostSummaryID,
		arg.PostID,
		arg.SummarizeMethod,
		arg.Summary,
		arg.SummarizedAt,
	)
	return err
}

const selectPost = `-- name: SelectPost :one
select post_id, feed_id, url, title, description, author, status, posted_at, last_fetched_at, created_at, updated_at
from posts
where post_id = $1
`

func (q *Queries) SelectPost(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRow(ctx, selectPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.FeedID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.Status,
		&i.PostedAt,
		&i.LastFetchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectPostFavorite = `-- name: SelectPostFavorite :one
select post_favorite_id, post_id, added_at, created_at from post_favorites where post_favorite_id = $1
`

func (q *Queries) SelectPostFavorite(ctx context.Context, postFavoriteID string) (PostFavorite, error) {
	row := q.db.QueryRow(ctx, selectPostFavorite, postFavoriteID)
	var i PostFavorite
	err := row.Scan(
		&i.PostFavoriteID,
		&i.PostID,
		&i.AddedAt,
		&i.CreatedAt,
	)
	return i, err
}

const selectPostFavoritesByPostIDs = `-- name: SelectPostFavoritesByPostIDs :many
select post_favorite_id, post_id, added_at, created_at
from post_favorites
where post_id = ANY ($1::uuid[])
`

func (q *Queries) SelectPostFavoritesByPostIDs(ctx context.Context, postIds []string) ([]PostFavorite, error) {
	rows, err := q.db.Query(ctx, selectPostFavoritesByPostIDs, postIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostFavorite
	for rows.Next() {
		var i PostFavorite
		if err := rows.Scan(
			&i.PostFavoriteID,
			&i.PostID,
			&i.AddedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPostForUpdate = `-- name: SelectPostForUpdate :one
select post_id, feed_id, url, title, description, author, status, posted_at, last_fetched_at, created_at, updated_at
from posts
where post_id = $1
    for update
`

func (q *Queries) SelectPostForUpdate(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRow(ctx, selectPostForUpdate, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.FeedID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.Status,
		&i.PostedAt,
		&i.LastFetchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectPostSummariesByPostIDs = `-- name: SelectPostSummariesByPostIDs :many
select post_summary_id, post_id, summarize_method, summary, summarized_at, created_at
from post_summaries
where post_id = ANY ($1::uuid[])
`

func (q *Queries) SelectPostSummariesByPostIDs(ctx context.Context, postIds []string) ([]PostSummary, error) {
	rows, err := q.db.Query(ctx, selectPostSummariesByPostIDs, postIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostSummary
	for rows.Next() {
		var i PostSummary
		if err := rows.Scan(
			&i.PostSummaryID,
			&i.PostID,
			&i.SummarizeMethod,
			&i.Summary,
			&i.SummarizedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPosts = `-- name: SelectPosts :many
select count(*) over () as total_count,
       p.post_id, p.feed_id, p.url, p.title, p.description, p.author, p.status, p.posted_at, p.last_fetched_at, p.created_at, p.updated_at
from posts p
left join post_favorites pf using (post_id)
where ((cardinality($1::uuid[]) = 0 or p.feed_id = ANY ($1::uuid[])))
and ($2::boolean = false or pf.post_favorite_id is not null)
order by case
             when $3::text = 'PostedAtAsc' then p.posted_at
             end asc nulls last,
         case
             when $3::text = 'PostedAtDesc' then p.posted_at
             end desc nulls last,
         p.posted_at desc nulls last
limit $5 offset $4
`

type SelectPostsParams struct {
	FeedIds           []string
	OnlyHaveFavorites bool
	Ord               string
	Off               int32
	Lim               int32
}

type SelectPostsRow struct {
	TotalCount int64
	Post       Post
}

func (q *Queries) SelectPosts(ctx context.Context, arg SelectPostsParams) ([]SelectPostsRow, error) {
	rows, err := q.db.Query(ctx, selectPosts,
		arg.FeedIds,
		arg.OnlyHaveFavorites,
		arg.Ord,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectPostsRow
	for rows.Next() {
		var i SelectPostsRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.Post.PostID,
			&i.Post.FeedID,
			&i.Post.Url,
			&i.Post.Title,
			&i.Post.Description,
			&i.Post.Author,
			&i.Post.Status,
			&i.Post.PostedAt,
			&i.Post.LastFetchedAt,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
update posts
set title           = $1,
    description     = $2,
    author          = $3,
    url             = $4,
    posted_at       = $5,
    last_fetched_at = $6,
    status          = $7,
    updated_at      = now()
where post_id = $8
`

type UpdatePostParams struct {
	Title         string
	Description   *string
	Author        *string
	Url           string
	PostedAt      *time.Time
	LastFetchedAt *time.Time
	Status        PostStatus
	PostID        string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.Url,
		arg.PostedAt,
		arg.LastFetchedAt,
		arg.Status,
		arg.PostID,
	)
	return err
}
