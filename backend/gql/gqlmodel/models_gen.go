// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Crawl struct {
	CrawlID   uuid.UUID   `json:"crawlId"`
	FeedID    uuid.UUID   `json:"feedId"`
	Status    CrawlStatus `json:"status"`
	Message   *string     `json:"message,omitempty"`
	CrawledAt time.Time   `json:"crawledAt"`
}

type Feed struct {
	FeedID       uuid.UUID `json:"feedId"`
	URL          string    `json:"url"`
	Title        string    `json:"title"`
	Description  *string   `json:"description,omitempty"`
	RegisteredAt time.Time `json:"registeredAt"`
}

type Mutation struct {
}

type NewFeed struct {
	URL         string  `json:"url"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
}

type Post struct {
	PostID          uuid.UUID `json:"postId"`
	FeedID          uuid.UUID `json:"feedId"`
	CrawlID         uuid.UUID `json:"crawlId"`
	Title           string    `json:"title"`
	Author          *string   `json:"author,omitempty"`
	URL             string    `json:"url"`
	SummaryOriginal *string   `json:"summaryOriginal,omitempty"`
	PostedAt        time.Time `json:"postedAt"`
}

type Query struct {
}

type CrawlStatus string

const (
	CrawlStatusSuccess CrawlStatus = "SUCCESS"
	CrawlStatusFailure CrawlStatus = "FAILURE"
)

var AllCrawlStatus = []CrawlStatus{
	CrawlStatusSuccess,
	CrawlStatusFailure,
}

func (e CrawlStatus) IsValid() bool {
	switch e {
	case CrawlStatusSuccess, CrawlStatusFailure:
		return true
	}
	return false
}

func (e CrawlStatus) String() string {
	return string(e)
}

func (e *CrawlStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CrawlStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CrawlStatus", str)
	}
	return nil
}

func (e CrawlStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CrawlStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CrawlStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
