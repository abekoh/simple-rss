package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"time"

	"github.com/abekoh/simple-rss/backend/gql"
	"github.com/abekoh/simple-rss/backend/lib/clock"
	"github.com/abekoh/simple-rss/backend/lib/database"
	"github.com/abekoh/simple-rss/backend/lib/sqlc"
	"github.com/abekoh/simple-rss/backend/lib/uid"
	"github.com/abekoh/simple-rss/backend/worker/feedfetcher"
	"github.com/mmcdole/gofeed"
)

// RegisterFeed is the resolver for the registerFeed field.
func (r *mutationResolver) RegisterFeed(ctx context.Context, input gql.RegisterFeedInput) (*gql.RegisterFeedPayload, error) {
	fp := gofeed.NewParser()
	feedContent, err := fp.ParseURL(input.URL)
	if err != nil {
		return nil, fmt.Errorf("failed to parse url: %w", err)
	}

	newFeedID := uid.NewUUID(ctx)
	if err := database.Transaction(ctx, func(c context.Context) error {
		if err := database.FromContext(ctx).Queries().InsertFeed(ctx, sqlc.InsertFeedParams{
			FeedID: newFeedID,
			Url:    input.URL,
			Title:  feedContent.Title,
			Description: func() *string {
				if feedContent.Description == "" {
					return nil
				}
				return &feedContent.Description
			}(),
			RegisteredAt: clock.Now(ctx),
		}); err != nil {
			return fmt.Errorf("failed to insert feed: %w", err)
		}
		return nil
	}); err != nil {
		return nil, fmt.Errorf("failed in transaction: %w", err)
	}

	r.feedFetcher.Request(ctx, feedfetcher.Request{
		FeedID: newFeedID,
	})

	return &gql.RegisterFeedPayload{
		FeedID: newFeedID,
	}, nil
}

// DeleteFeed is the resolver for the deleteFeed field.
func (r *mutationResolver) DeleteFeed(ctx context.Context, input gql.DeleteFeedInput) (*gql.DeleteFeedPayload, error) {
	if err := database.Transaction(ctx, func(c context.Context) error {
		if _, err := database.FromContext(ctx).Queries().SelectFeed(ctx, input.FeedID); err != nil {
			return fmt.Errorf("failed to select feed: %w", err)
		}
		if err := database.FromContext(ctx).Queries().DeleteFeed(ctx, input.FeedID); err != nil {
			return fmt.Errorf("failed to delete feed: %w", err)
		}
		return nil
	}); err != nil {
		return nil, fmt.Errorf("failed in transaction: %w", err)
	}
	return &gql.DeleteFeedPayload{
		FeedID: input.FeedID,
	}, nil
}

// AddPostFavorite is the resolver for the addPostFavorite field.
func (r *mutationResolver) AddPostFavorite(ctx context.Context, input gql.AddPostFavoriteInput) (*gql.AddPostFavoritePayload, error) {
	postFavoriteID := uid.NewUUID(ctx)
	if err := database.Transaction(ctx, func(c context.Context) error {
		if err := database.FromContext(ctx).Queries().InsertPostFavorite(ctx, sqlc.InsertPostFavoriteParams{
			PostFavoriteID: postFavoriteID,
			PostID:         input.PostID,
			AddedAt:        clock.Now(ctx),
		}); err != nil {
			return fmt.Errorf("failed to insert post favorite: %w", err)
		}
	}); err != nil {
		return nil, fmt.Errorf("failed in transaction: %w", err)
	}
	return &gql.AddPostFavoritePayload{
		PostID:         input.PostID,
		PostFavoriteID: postFavoriteID,
	}, nil
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
