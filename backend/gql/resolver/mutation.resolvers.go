package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/abekoh/simple-rss/backend/domain/service"
	"github.com/abekoh/simple-rss/backend/gql"
	"github.com/abekoh/simple-rss/backend/lib/database"
)

// RegisterFeed is the resolver for the registerFeed field.
func (r *mutationResolver) RegisterFeed(ctx context.Context, input gql.RegisterFeedInput) (*gql.RegisterFeedPayload, error) {
	var newFeedID string
	if err := database.Transaction(ctx, func(c context.Context) error {
		createRes, err := service.RegisterFeed(ctx, service.RegisterFeedInput{
			URL:         input.URL,
			Title:       input.Title,
			Description: input.Description,
		})
		if err != nil {
			return err
		}
		newFeedID = createRes.NewFeed.FeedID
		return nil
	}); err != nil {
		return nil, err
	}
	return &gql.RegisterFeedPayload{
		FeedID: newFeedID,
	}, nil
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
