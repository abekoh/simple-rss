package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/abekoh/simple-rss/backend/gql"
	"github.com/abekoh/simple-rss/backend/lib/database"
	"github.com/abekoh/simple-rss/backend/lib/sqlc"
	"github.com/samber/lo"
)

// Feeds is the resolver for the feeds field.
func (r *queryResolver) Feeds(ctx context.Context) ([]*gql.Feed, error) {
	queries := database.FromContext(ctx).Queries()
	feeds, err := queries.SelectFeedsOrderByRegisteredAtAsc(ctx)
	if err != nil {
		return nil, err
	}
	return mapSlice(feeds, mapFeed), nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, input gql.PostsInput) (*gql.PostsPayload, error) {
	posts, err := database.FromContext(ctx).Queries().SelectPosts(ctx, sqlc.SelectPostsParams{
		FeedIds: lo.Map(input.FeedIds, func(x string, _ int) string { return x }),
		Ord:     string(input.Order),
		Off:     input.Limit,
		Lim:     input.Offset,
	})
	if err != nil {
		return nil, err
	}
	if len(posts) == 0 {
		return &gql.PostsPayload{
			TotalCount: 0,
			Posts:      []*gql.Post{},
		}, nil
	}
	return &gql.PostsPayload{
		TotalCount: int32(posts[0].TotalCount),
		Posts: mapSlice(posts, func(x sqlc.SelectPostsRow) *gql.Post {
			return mapPost(x.Post)
		}),
	}, nil
}

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
