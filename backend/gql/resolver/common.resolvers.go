package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"fmt"

	"github.com/abekoh/simple-rss/backend/gql"
	"github.com/abekoh/simple-rss/backend/lib/dataloader"
)

// Summary is the resolver for the summary field.
func (r *postResolver) Summary(ctx context.Context, obj *gql.Post) (*gql.PostSummary, error) {
	summary, err := dataloader.FromContext(ctx).PostSummaryByPostID(ctx, obj.PostID)
	if err != nil {
		if errors.Is(err, dataloader.ErrNotFound) {
			return nil, nil
		}
		return nil, fmt.Errorf("failed to get post summary: %w", err)
	}
	return mapPostSummary(summary), nil
}

// Favorite is the resolver for the favorite field.
func (r *postResolver) Favorite(ctx context.Context, obj *gql.Post) (*gql.PostFavorite, error) {
	favorite, err := dataloader.FromContext(ctx).PostFavoritesByPostID(ctx, obj.PostID)
	if err != nil {
		if errors.Is(err, dataloader.ErrNotFound) {
			return nil, nil
		}
		return nil, fmt.Errorf("failed to get post favorite: %w", err)
	}
	return mapPostFavorite(favorite), nil
}

// Feed is the resolver for the feed field.
func (r *postResolver) Feed(ctx context.Context, obj *gql.Post) (*gql.Feed, error) {
	feed, err := dataloader.FromContext(ctx).Feed(ctx, obj.FeedID)
	if err != nil {
		return nil, err
	}
	return mapFeed(feed), nil
}

// Post returns gql.PostResolver implementation.
func (r *Resolver) Post() gql.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
